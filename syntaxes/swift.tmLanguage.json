{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Swift",
    "scopeName": "source.swift",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#invalid"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#string"
        },
        {
            "include": "#support"
        },
        {
            "include": "#type"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.swift",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.swift"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.swift"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment"
                        }
                    ]
                },
                {
                    "begin": "(^[ \\t]+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.swift"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "name": "comment.line.double-slash.swift",
                            "begin": "//",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.swift"
                                }
                            },
                            "end": "\\n",
                            "patterns": [
                                {
                                    "name": "punctuation.separator.continuation.swift",
                                    "match": "(?>\\\\\\s*\\n)"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "name": "constant.language.swift",
                    "match": "\\b(true|false|nil|none)\\b"
                },
                {
                    "name": "constant.numeric.swift",
                    "match": "(?x) (?### INTEGER ###) (?<integer-literal> \\g<binary-literal> | \\g<octal-literal> | \\g<hexadecimal-literal> | \\g<decimal-literal> ){0} (?### BINARY ###) (?<binary-literal> \\b 0b \\g<binary-digit> \\g<binary-literal-characters>? \\b ){0} (?<binary-digit> [0-1] ){0} (?<binary-literal-character> \\g<binary-digit> | _ ){0} (?<binary-literal-characters> \\g<binary-literal-character> \\g<binary-literal-characters>? ){0} (?### OCTAL ###) (?<octal-literal> \\b 0o \\g<octal-digit> \\g<octal-literal-characters>? \\b ){0} (?<octal-digit> [0-7] ){0} (?<octal-literal-character> \\g<octal-digit> | _ ){0} (?<octal-literal-characters>        \\g<octal-literal-character> \\g<octal-literal-characters>? ){0} (?### DECIMAL ###) (?<decimal-literal> \\b \\g<decimal-digit> \\g<decimal-literal-characters>? \\b ){0} (?<decimal-digit> \\d ){0} (?<decimal-literal-character>       \\g<decimal-digit> | _ ){0} (?<decimal-literal-characters> \\g<decimal-literal-character> \\g<decimal-literal-characters>? ){0} (?### HEXADECIMAL ###) (?<hexadecimal-literal> \\b 0x \\g<hexadecimal-digit> \\g<hexadecimal-literal-characters>? \\b ){0} (?<hexadecimal-digit> \\h ){0} (?<hexadecimal-literal-character>   \\g<hexadecimal-digit> | _ ){0} (?<hexadecimal-literal-characters>  \\g<hexadecimal-literal-character> \\g<hexadecimal-literal-characters>? ){0} (?### FLOATING POINT ###) (?<floating-point-literal> \\b \\g<decimal-literal> \\g<decimal-fraction>? \\g<decimal-exponent>? \\b | \\b \\g<hexadecimal-literal> \\g<hexadecimal-fraction>? \\g<hexadecimal-exponent> \\b ){0} (?<decimal-fraction> \\. \\g<decimal-literal> ){0} (?<decimal-exponent> \\g<floating-point-e> \\g<sign>? \\g<decimal-literal> ){0} (?<hexadecimal-fraction> \\. \\g<hexadecimal-literal>? ){0} (?<hexadecimal-exponent> \\g<floating-point-p> \\g<sign>? \\g<hexadecimal-literal> ){0} (?<floating-point-e> [eE] ){0} (?<floating-point-p> [pP] ){0} (?<sign> [+-] ){0} (?!0[box]) \\g<floating-point-literal> | \\g<integer-literal>"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "match": "([a-zA-RT-Z][a-zA-Z_]+)(?=[(])",
                    "name": "entity.name.function.swift"
                }
            ]
        },
        "invalid": {
            "patterns": []
        },
        "keyword": {
            "patterns": []
        },
        "meta": {
            "patterns": []
        },
        "operator": {
            "patterns": []
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.other.comma.swift",
                    "match": ","
                },
                {
                    "name": "punctuation.other.paren.swift",
                    "match": "[)(]"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.type.swift",
                    "match": "\\b(class|enum|extension|func|let|protocol|struct|var)\\b"
                },
                {
                    "name": "storage.type.swift",
                    "match": "\\b(typealias|precedencegroup)\\b"
                }
            ]
        },
        "escaped-char": {
            "patterns": [
                {
                    "name": "constant.character.escape.swift",
                    "match": "\\\\[0\\\\tnr\"']"
                },
                {
                    "name": "constant.character.escape.swift",
                    "match": "\\\\(x\\h{2}|u\\h{4}|U\\h{8})"
                },
                {
                    "name": "invalid.illegal.constant.character.escape.swift",
                    "match": "\\\\[^uxU]"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.quoted.single.swift",
                    "begin": "'",
                    "end": "'"
                },
                {
                    "name": "string.quoted.double.swift",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "begin": "\\\\\\(",
                            "end": "\\)",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.section.embedded.begin.swift"
                                }
                            },
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.section.embedded.end.swift"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "punctuation.section.embedded.swift",
                                    "match": "."
                                }
                            ]
                        },
                        {
                            "include": "#escaped-char"
                        }
                    ]
                }
            ]
        },
        "support": {
            "patterns": []
        },
        "type": {
            "patterns": [
                {
                    "name": "support.type.swift",
                    "match": "(?x) \\b(Character|U?Int|U?Int(8|16|32|64) |Float|Double|Float(32|64)|Bool|String|Date|Data|URL |(double|float)[234]|(double|float)[234]x[234] |Any |AnyObject |Error |Equatable |Hashable |Comparable |CustomDebugStringConvertible |CustomStringConvertible |OptionSet |ManagedBuffer |ManagedBufferPointer |BitwiseOperations |CountedSet |Counter |Directions |ExpressibleByArrayLiteral |ExpressibleByBooleanLiteral |ExpressibleByDictionaryLiteral |ExpressibleByExtendedGraphemeClusterLiteral |ExpressibleByFloatLitera |ExpressibleByIntegerLiteral |ExpressibleByNilLiteral |ExpressibleByStringInterpolation |ExpressibleByStringLiteral |ExpressibleByUnicodeScalarLiteral |OrderedSet |PaperSize |RawRepresentable |(UI|NS|CF|CG)[A-Z][a-zA-Z0-9]+ |Stream |(In|Out)putStream |FileManager |Array |Unsafe[a-zA-Z]*Pointer |Bundle |Jex)\\b"
                }
            ]
        },
        "variable": {
            "patterns": []
        }
    }
}